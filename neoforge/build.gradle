plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge {
        //platformPackage = "forge"
    }
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    runs {
        configureEach {
            vmArg "-Dmixin.debug.export=true"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}


processResources {
    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta', 'update.json']) {
        expand rootProject.ext.replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "neoforge"
    atAccessWideners.add("${rootProject.mod_id}.accesswidener") // this is a path inside the mod jar
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

    archiveClassifier = "neoforge-sources"
}

remapSourcesJar{
    archiveClassifier = "neoforge-sources"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }
    }
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    neoForge "net.neoforged:neoforge:${neo_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    implementation 'org.jetbrains:annotations:22.0.0'

    modImplementation("net.mehvahdjukaar:moonlight-neoforge:${moonlight_version}")

    //modImplementation("curse.maven:selene-499980:6324921")
    modImplementation("curse.maven:ars-nouveau-401955:6333245")
    modCompileOnly("curse.maven:repurposed-structures-368293:4823487")
    modCompileOnly("curse.maven:framedblocks-441647:5143589")
    modImplementation("curse.maven:curios-309927:6342656")
    modImplementation("curse.maven:geckolib-388172:6304958")
//    modCompileOnly("cy.jdkdigital.productivelib:productivelib-1.20.1-0.0.4")
//    modCompileOnly("cy.jdkdigital.productivetrees:productivetrees-1.20.1-0.2.2")

    modImplementation("curse.maven:emi-580555:6205506")

    //modImplementation("curse.maven:emi-580555:5704405")
   // modRuntimeOnly "dev.latvian.mods:kubejs-neoforge:2101.7.1-build.181"
  //  modRuntimeOnly "dev.latvian.mods:rhino:2101.2.5-build.54"
   // forgeRuntimeLibrary "dev.latvian.apps:tiny-java-server:1.0.0-build.6"
    modCompileOnly("curse.maven:jei-238222:5846880")


}
